PAUL GRAHAM
BEATING THE AVERAGES


THIS ARTICLE IS DERIVED FROM A TALK GIVEN AT THE FRANZ DEVELOPER SYMPOSIUM.

IN THE SUMMER OF , MY FRIEND ROBERT MORRIS AND I STARTED A STARTUP CALLED VIAWEB. OUR PLAN WAS TO WRITE SOFTWARE THAT WOULD LET END USERS BUILD ONLINE STORES. WHAT WAS NOVEL ABOUT THIS SOFTWARE, AT THE TIME, WAS THAT IT RAN ON OUR SERVER, USING ORDINARY WEB PAGES AS THE INTERFACE.

A LOT OF PEOPLE COULD HAVE BEEN HAVING THIS IDEA AT THE SAME TIME, OF COURSE, BUT AS FAR AS I KNOW, VIAWEB WAS THE FIRST WEBBASED APPLICATION. IT SEEMED SUCH A NOVEL IDEA TO US THAT WE NAMED THE COMPANY AFTER IT VIAWEB, BECAUSE OUR SOFTWARE WORKED VIA THE WEB, INSTEAD OF RUNNING ON YOUR DESKTOP COMPUTER.

ANOTHER UNUSUAL THING ABOUT THIS SOFTWARE WAS THAT IT WAS WRITTEN PRIMARILY IN A PROGRAMMING LANGUAGE CALLED LISP. IT WAS ONE OF THE FIRST BIG ENDUSER APPLICATIONS TO BE WRITTEN IN LISP, WHICH UP TILL THEN HAD BEEN USED MOSTLY IN UNIVERSITIES AND RESEARCH LABS. 

THE SECRET WEAPON

ERIC RAYMOND HAS WRITTEN AN ESSAY CALLED HOW TO BECOME A HACKER, AND IN IT, AMONG OTHER THINGS, HE TELLS WOULDBE HACKERS WHAT LANGUAGES THEY SHOULD LEARN. HE SUGGESTS STARTING WITH PYTHON AND JAVA, BECAUSE THEY ARE EASY TO LEARN. THE SERIOUS HACKER WILL ALSO WANT TO LEARN C, IN ORDER TO HACK UNIX, AND PERL FOR SYSTEM ADMINISTRATION AND CGI SCRIPTS. FINALLY, THE TRULY SERIOUS HACKER SHOULD CONSIDER LEARNING LISP

LISP IS WORTH LEARNING FOR THE PROFOUND ENLIGHTENMENT EXPERIENCE YOU WILL HAVE WHEN YOU FINALLY GET IT THAT EXPERIENCE WILL MAKE YOU A BETTER PROGRAMMER FOR THE REST OF YOUR DAYS, EVEN IF YOU NEVER ACTUALLY USE LISP ITSELF A LOT.
THIS IS THE SAME ARGUMENT YOU TEND TO HEAR FOR LEARNING LATIN. IT WONT GET YOU A JOB, EXCEPT PERHAPS AS A CLASSICS PROFESSOR, BUT IT WILL IMPROVE YOUR MIND, AND MAKE YOU A BETTER WRITER IN LANGUAGES YOU DO WANT TO USE, LIKE ENGLISH.

BUT WAIT A MINUTE. THIS METAPHOR DOESNT STRETCH THAT FAR. THE REASON LATIN WONT GET YOU A JOB IS THAT NO ONE SPEAKS IT. IF YOU WRITE IN LATIN, NO ONE CAN UNDERSTAND YOU. BUT LISP IS A COMPUTER LANGUAGE, AND COMPUTERS SPEAK WHATEVER LANGUAGE YOU, THE PROGRAMMER, TELL THEM TO.

SO IF LISP MAKES YOU A BETTER PROGRAMMER, LIKE HE SAYS, WHY WOULDNT YOU WANT TO USE IT? IF A PAINTER WERE OFFERED A BRUSH THAT WOULD MAKE HIM A BETTER PAINTER, IT SEEMS TO ME THAT HE WOULD WANT TO USE IT IN ALL HIS PAINTINGS, WOULDNT HE? IM NOT TRYING TO MAKE FUN OF ERIC RAYMOND HERE. ON THE WHOLE, HIS ADVICE IS GOOD. WHAT HE SAYS ABOUT LISP IS PRETTY MUCH THE CONVENTIONAL WISDOM. BUT THERE IS A CONTRADICTION IN THE CONVENTIONAL WISDOM LISP WILL MAKE YOU A BETTER PROGRAMMER, AND YET YOU WONT USE IT.

WHY NOT? PROGRAMMING LANGUAGES ARE JUST TOOLS, AFTER ALL. IF LISP REALLY DOES YIELD BETTER PROGRAMS, YOU SHOULD USE IT. AND IF IT DOESNT, THEN WHO NEEDS IT?

THIS IS NOT JUST A THEORETICAL QUESTION. SOFTWARE IS A VERY COMPETITIVE BUSINESS, PRONE TO NATURAL MONOPOLIES. A COMPANY THAT GETS SOFTWARE WRITTEN FASTER AND BETTER WILL, ALL OTHER THINGS BEING EQUAL, PUT ITS COMPETITORS OUT OF BUSINESS. AND WHEN YOURE STARTING A STARTUP, YOU FEEL THIS VERY KEENLY. STARTUPS TEND TO BE AN ALL OR NOTHING PROPOSITION. YOU EITHER GET RICH, OR YOU GET NOTHING. IN A STARTUP, IF YOU BET ON THE WRONG TECHNOLOGY, YOUR COMPETITORS WILL CRUSH YOU.

ROBERT AND I BOTH KNEW LISP WELL, AND WE COULDNT SEE ANY REASON NOT TO TRUST OUR INSTINCTS AND GO WITH LISP. WE KNEW THAT EVERYONE ELSE WAS WRITING THEIR SOFTWARE IN C OR PERL. BUT WE ALSO KNEW THAT THAT DIDNT MEAN ANYTHING. IF YOU CHOSE TECHNOLOGY THAT WAY, YOUD BE RUNNING WINDOWS. WHEN YOU CHOOSE TECHNOLOGY, YOU HAVE TO IGNORE WHAT OTHER PEOPLE ARE DOING, AND CONSIDER ONLY WHAT WILL WORK THE BEST.

THIS IS ESPECIALLY TRUE IN A STARTUP. IN A BIG COMPANY, YOU CAN DO WHAT ALL THE OTHER BIG COMPANIES ARE DOING. BUT A STARTUP CANT DO WHAT ALL THE OTHER STARTUPS DO. I DONT THINK A LOT OF PEOPLE REALIZE THIS, EVEN IN STARTUPS.

THE AVERAGE BIG COMPANY GROWS AT ABOUT TEN PERCENT A YEAR. SO IF YOURE RUNNING A BIG COMPANY AND YOU DO EVERYTHING THE WAY THE AVERAGE BIG COMPANY DOES IT, YOU CAN EXPECT TO DO AS WELL AS THE AVERAGE BIG COMPANY THAT IS, TO GROW ABOUT TEN PERCENT A YEAR.

THE SAME THING WILL HAPPEN IF YOURE RUNNING A STARTUP, OF COURSE. IF YOU DO EVERYTHING THE WAY THE AVERAGE STARTUP DOES IT, YOU SHOULD EXPECT AVERAGE PERFORMANCE. THE PROBLEM HERE IS, AVERAGE PERFORMANCE MEANS THAT YOULL GO OUT OF BUSINESS. THE SURVIVAL RATE FOR STARTUPS IS WAY LESS THAN FIFTY PERCENT. SO IF YOURE RUNNING A STARTUP, YOU HAD BETTER BE DOING SOMETHING ODD. IF NOT, YOURE IN TROUBLE.

BACK IN , WE KNEW SOMETHING THAT I DONT THINK OUR COMPETITORS UNDERSTOOD, AND FEW UNDERSTAND EVEN NOW WHEN YOURE WRITING SOFTWARE THAT ONLY HAS TO RUN ON YOUR OWN SERVERS, YOU CAN USE ANY LANGUAGE YOU WANT. WHEN YOURE WRITING DESKTOP SOFTWARE, THERES A STRONG BIAS TOWARD WRITING APPLICATIONS IN THE SAME LANGUAGE AS THE OPERATING SYSTEM. TEN YEARS AGO, WRITING APPLICATIONS MEANT WRITING APPLICATIONS IN C. BUT WITH WEBBASED SOFTWARE, ESPECIALLY WHEN YOU HAVE THE SOURCE CODE OF BOTH THE LANGUAGE AND THE OPERATING SYSTEM, YOU CAN USE WHATEVER LANGUAGE YOU WANT.

THIS NEW FREEDOM IS A DOUBLEEDGED SWORD, HOWEVER. NOW THAT YOU CAN USE ANY LANGUAGE, YOU HAVE TO THINK ABOUT WHICH ONE TO USE. COMPANIES THAT TRY TO PRETEND NOTHING HAS CHANGED RISK FINDING THAT THEIR COMPETITORS DO NOT.

IF YOU CAN USE ANY LANGUAGE, WHICH DO YOU USE? WE CHOSE LISP. FOR ONE THING, IT WAS OBVIOUS THAT RAPID DEVELOPMENT WOULD BE IMPORTANT IN THIS MARKET. WE WERE ALL STARTING FROM SCRATCH, SO A COMPANY THAT COULD GET NEW FEATURES DONE BEFORE ITS COMPETITORS WOULD HAVE A BIG ADVANTAGE. WE KNEW LISP WAS A REALLY GOOD LANGUAGE FOR WRITING SOFTWARE QUICKLY, AND SERVERBASED APPLICATIONS MAGNIFY THE EFFECT OF RAPID DEVELOPMENT, BECAUSE YOU CAN RELEASE SOFTWARE THE MINUTE ITS DONE.

IF OTHER COMPANIES DIDNT WANT TO USE LISP, SO MUCH THE BETTER. IT MIGHT GIVE US A TECHNOLOGICAL EDGE, AND WE NEEDED ALL THE HELP WE COULD GET. WHEN WE STARTED VIAWEB, WE HAD NO EXPERIENCE IN BUSINESS. WE DIDNT KNOW ANYTHING ABOUT MARKETING, OR HIRING PEOPLE, OR RAISING MONEY, OR GETTING CUSTOMERS. NEITHER OF US HAD EVER EVEN HAD WHAT YOU WOULD CALL A REAL JOB. THE ONLY THING WE WERE GOOD AT WAS WRITING SOFTWARE. WE HOPED THAT WOULD SAVE US. ANY ADVANTAGE WE COULD GET IN THE SOFTWARE DEPARTMENT, WE WOULD TAKE.

SO YOU COULD SAY THAT USING LISP WAS AN EXPERIMENT. OUR HYPOTHESIS WAS THAT IF WE WROTE OUR SOFTWARE IN LISP, WED BE ABLE TO GET FEATURES DONE FASTER THAN OUR COMPETITORS, AND ALSO TO DO THINGS IN OUR SOFTWARE THAT THEY COULDNT DO. AND BECAUSE LISP WAS SO HIGHLEVEL, WE WOULDNT NEED A BIG DEVELOPMENT TEAM, SO OUR COSTS WOULD BE LOWER. IF THIS WERE SO, WE COULD OFFER A BETTER PRODUCT FOR LESS MONEY, AND STILL MAKE A PROFIT. WE WOULD END UP GETTING ALL THE USERS, AND OUR COMPETITORS WOULD GET NONE, AND EVENTUALLY GO OUT OF BUSINESS. THAT WAS WHAT WE HOPED WOULD HAPPEN, ANYWAY.

WHAT WERE THE RESULTS OF THIS EXPERIMENT? SOMEWHAT SURPRISINGLY, IT WORKED. WE EVENTUALLY HAD MANY COMPETITORS, ON THE ORDER OF TWENTY TO THIRTY OF THEM, BUT NONE OF THEIR SOFTWARE COULD COMPETE WITH OURS. WE HAD A WYSIWYG ONLINE STORE BUILDER THAT RAN ON THE SERVER AND YET FELT LIKE A DESKTOP APPLICATION. OUR COMPETITORS HAD CGI SCRIPTS. AND WE WERE ALWAYS FAR AHEAD OF THEM IN FEATURES. SOMETIMES, IN DESPERATION, COMPETITORS WOULD TRY TO INTRODUCE FEATURES THAT WE DIDNT HAVE. BUT WITH LISP OUR DEVELOPMENT CYCLE WAS SO FAST THAT WE COULD SOMETIMES DUPLICATE A NEW FEATURE WITHIN A DAY OR TWO OF A COMPETITOR ANNOUNCING IT IN A PRESS RELEASE. BY THE TIME JOURNALISTS COVERING THE PRESS RELEASE GOT ROUND TO CALLING US, WE WOULD HAVE THE NEW FEATURE TOO.

IT MUST HAVE SEEMED TO OUR COMPETITORS THAT WE HAD SOME KIND OF SECRET WEAPON THAT WE WERE DECODING THEIR ENIGMA TRAFFIC OR SOMETHING. IN FACT WE DID HAVE A SECRET WEAPON, BUT IT WAS SIMPLER THAN THEY REALIZED. NO ONE WAS LEAKING NEWS OF THEIR FEATURES TO US. WE WERE JUST ABLE TO DEVELOP SOFTWARE FASTER THAN ANYONE THOUGHT POSSIBLE.

WHEN I WAS ABOUT NINE I HAPPENED TO GET HOLD OF A COPY OF THE DAY OF THE JACKAL, BY FREDERICK FORSYTH. THE MAIN CHARACTER IS AN ASSASSIN WHO IS HIRED TO KILL THE PRESIDENT OF FRANCE. THE ASSASSIN HAS TO GET PAST THE POLICE TO GET UP TO AN APARTMENT THAT OVERLOOKS THE PRESIDENTS ROUTE. HE WALKS RIGHT BY THEM, DRESSED UP AS AN OLD MAN ON CRUTCHES, AND THEY NEVER SUSPECT HIM.

OUR SECRET WEAPON WAS SIMILAR. WE WROTE OUR SOFTWARE IN A WEIRD AI LANGUAGE, WITH A BIZARRE SYNTAX FULL OF PARENTHESES. FOR YEARS IT HAD ANNOYED ME TO HEAR LISP DESCRIBED THAT WAY. BUT NOW IT WORKED TO OUR ADVANTAGE. IN BUSINESS, THERE IS NOTHING MORE VALUABLE THAN A TECHNICAL ADVANTAGE YOUR COMPETITORS DONT UNDERSTAND. IN BUSINESS, AS IN WAR, SURPRISE IS WORTH AS MUCH AS FORCE.

AND SO, IM A LITTLE EMBARRASSED TO SAY, I NEVER SAID ANYTHING PUBLICLY ABOUT LISP WHILE WE WERE WORKING ON VIAWEB. WE NEVER MENTIONED IT TO THE PRESS, AND IF YOU SEARCHED FOR LISP ON OUR WEB SITE, ALL YOUD FIND WERE THE TITLES OF TWO BOOKS IN MY BIO. THIS WAS NO ACCIDENT. A STARTUP SHOULD GIVE ITS COMPETITORS AS LITTLE INFORMATION AS POSSIBLE. IF THEY DIDNT KNOW WHAT LANGUAGE OUR SOFTWARE WAS WRITTEN IN, OR DIDNT CARE, I WANTED TO KEEP IT THAT WAY.

THE PEOPLE WHO UNDERSTOOD OUR TECHNOLOGY BEST WERE THE CUSTOMERS. THEY DIDNT CARE WHAT LANGUAGE VIAWEB WAS WRITTEN IN EITHER, BUT THEY NOTICED THAT IT WORKED REALLY WELL. IT LET THEM BUILD GREAT LOOKING ONLINE STORES LITERALLY IN MINUTES. AND SO, BY WORD OF MOUTH MOSTLY, WE GOT MORE AND MORE USERS. BY THE END OF WE HAD ABOUT STORES ONLINE. AT THE END OF WE HAD . SIX MONTHS LATER, WHEN YAHOO BOUGHT US, WE HAD USERS. TODAY, AS YAHOO STORE, THIS SOFTWARE CONTINUES TO DOMINATE ITS MARKET. ITS ONE OF THE MORE PROFITABLE PIECES OF YAHOO, AND THE STORES BUILT WITH IT ARE THE FOUNDATION OF YAHOO SHOPPING. I LEFT YAHOO IN , SO I DONT KNOW EXACTLY HOW MANY USERS THEY HAVE NOW, BUT THE LAST I HEARD THERE WERE ABOUT ,.

THE BLUB PARADOX

WHATS SO GREAT ABOUT LISP? AND IF LISP IS SO GREAT, WHY DOESNT EVERYONE USE IT? THESE SOUND LIKE RHETORICAL QUESTIONS, BUT ACTUALLY THEY HAVE STRAIGHTFORWARD ANSWERS. LISP IS SO GREAT NOT BECAUSE OF SOME MAGIC QUALITY VISIBLE ONLY TO DEVOTEES, BUT BECAUSE IT IS SIMPLY THE MOST POWERFUL LANGUAGE AVAILABLE. AND THE REASON EVERYONE DOESNT USE IT IS THAT PROGRAMMING LANGUAGES ARE NOT MERELY TECHNOLOGIES, BUT HABITS OF MIND AS WELL, AND NOTHING CHANGES SLOWER. OF COURSE, BOTH THESE ANSWERS NEED EXPLAINING.

ILL BEGIN WITH A SHOCKINGLY CONTROVERSIAL STATEMENT PROGRAMMING LANGUAGES VARY IN POWER.

FEW WOULD DISPUTE, AT LEAST, THAT HIGH LEVEL LANGUAGES ARE MORE POWERFUL THAN MACHINE LANGUAGE. MOST PROGRAMMERS TODAY WOULD AGREE THAT YOU DO NOT, ORDINARILY, WANT TO PROGRAM IN MACHINE LANGUAGE. INSTEAD, YOU SHOULD PROGRAM IN A HIGHLEVEL LANGUAGE, AND HAVE A COMPILER TRANSLATE IT INTO MACHINE LANGUAGE FOR YOU. THIS IDEA IS EVEN BUILT INTO THE HARDWARE NOW SINCE THE S, INSTRUCTION SETS HAVE BEEN DESIGNED FOR COMPILERS RATHER THAN HUMAN PROGRAMMERS.

EVERYONE KNOWS ITS A MISTAKE TO WRITE YOUR WHOLE PROGRAM BY HAND IN MACHINE LANGUAGE. WHATS LESS OFTEN UNDERSTOOD IS THAT THERE IS A MORE GENERAL PRINCIPLE HERE THAT IF YOU HAVE A CHOICE OF SEVERAL LANGUAGES, IT IS, ALL OTHER THINGS BEING EQUAL, A MISTAKE TO PROGRAM IN ANYTHING BUT THE MOST POWERFUL ONE. 

THERE ARE MANY EXCEPTIONS TO THIS RULE. IF YOURE WRITING A PROGRAM THAT HAS TO WORK VERY CLOSELY WITH A PROGRAM WRITTEN IN A CERTAIN LANGUAGE, IT MIGHT BE A GOOD IDEA TO WRITE THE NEW PROGRAM IN THE SAME LANGUAGE. IF YOURE WRITING A PROGRAM THAT ONLY HAS TO DO SOMETHING VERY SIMPLE, LIKE NUMBER CRUNCHING OR BIT MANIPULATION, YOU MAY AS WELL USE A LESS ABSTRACT LANGUAGE, ESPECIALLY SINCE IT MAY BE SLIGHTLY FASTER. AND IF YOURE WRITING A SHORT, THROWAWAY PROGRAM, YOU MAY BE BETTER OFF JUST USING WHATEVER LANGUAGE HAS THE BEST LIBRARY FUNCTIONS FOR THE TASK. BUT IN GENERAL, FOR APPLICATION SOFTWARE, YOU WANT TO BE USING THE MOST POWERFUL REASONABLY EFFICIENT LANGUAGE YOU CAN GET, AND USING ANYTHING ELSE IS A MISTAKE, OF EXACTLY THE SAME KIND, THOUGH POSSIBLY IN A LESSER DEGREE, AS PROGRAMMING IN MACHINE LANGUAGE.

YOU CAN SEE THAT MACHINE LANGUAGE IS VERY LOW LEVEL. BUT, AT LEAST AS A KIND OF SOCIAL CONVENTION, HIGHLEVEL LANGUAGES ARE OFTEN ALL TREATED AS EQUIVALENT. THEYRE NOT. TECHNICALLY THE TERM HIGHLEVEL LANGUAGE DOESNT MEAN ANYTHING VERY DEFINITE. THERES NO DIVIDING LINE WITH MACHINE LANGUAGES ON ONE SIDE AND ALL THE HIGHLEVEL LANGUAGES ON THE OTHER. LANGUAGES FALL ALONG A CONTINUUM OF ABSTRACTNESS, FROM THE MOST POWERFUL ALL THE WAY DOWN TO MACHINE LANGUAGES, WHICH THEMSELVES VARY IN POWER.

CONSIDER COBOL. COBOL IS A HIGHLEVEL LANGUAGE, IN THE SENSE THAT IT GETS COMPILED INTO MACHINE LANGUAGE. WOULD ANYONE SERIOUSLY ARGUE THAT COBOL IS EQUIVALENT IN POWER TO, SAY, PYTHON? ITS PROBABLY CLOSER TO MACHINE LANGUAGE THAN PYTHON.

OR HOW ABOUT PERL ? BETWEEN PERL AND PERL , LEXICAL CLOSURES GOT ADDED TO THE LANGUAGE. MOST PERL HACKERS WOULD AGREE THAT PERL IS MORE POWERFUL THAN PERL . BUT ONCE YOUVE ADMITTED THAT, YOUVE ADMITTED THAT ONE HIGH LEVEL LANGUAGE CAN BE MORE POWERFUL THAN ANOTHER. AND IT FOLLOWS INEXORABLY THAT, EXCEPT IN SPECIAL CASES, YOU OUGHT TO USE THE MOST POWERFUL YOU CAN GET.

THIS IDEA IS RARELY FOLLOWED TO ITS CONCLUSION, THOUGH. AFTER A CERTAIN AGE, PROGRAMMERS RARELY SWITCH LANGUAGES VOLUNTARILY. WHATEVER LANGUAGE PEOPLE HAPPEN TO BE USED TO, THEY TEND TO CONSIDER JUST GOOD ENOUGH.

PROGRAMMERS GET VERY ATTACHED TO THEIR FAVORITE LANGUAGES, AND I DONT WANT TO HURT ANYONES FEELINGS, SO TO EXPLAIN THIS POINT IM GOING TO USE A HYPOTHETICAL LANGUAGE CALLED BLUB. BLUB FALLS RIGHT IN THE MIDDLE OF THE ABSTRACTNESS CONTINUUM. IT IS NOT THE MOST POWERFUL LANGUAGE, BUT IT IS MORE POWERFUL THAN COBOL OR MACHINE LANGUAGE.

AND IN FACT, OUR HYPOTHETICAL BLUB PROGRAMMER WOULDNT USE EITHER OF THEM. OF COURSE HE WOULDNT PROGRAM IN MACHINE LANGUAGE. THATS WHAT COMPILERS ARE FOR. AND AS FOR COBOL, HE DOESNT KNOW HOW ANYONE CAN GET ANYTHING DONE WITH IT. IT DOESNT EVEN HAVE X BLUB FEATURE OF YOUR CHOICE.

AS LONG AS OUR HYPOTHETICAL BLUB PROGRAMMER IS LOOKING DOWN THE POWER CONTINUUM, HE KNOWS HES LOOKING DOWN. LANGUAGES LESS POWERFUL THAN BLUB ARE OBVIOUSLY LESS POWERFUL, BECAUSE THEYRE MISSING SOME FEATURE HES USED TO. BUT WHEN OUR HYPOTHETICAL BLUB PROGRAMMER LOOKS IN THE OTHER DIRECTION, UP THE POWER CONTINUUM, HE DOESNT REALIZE HES LOOKING UP. WHAT HE SEES ARE MERELY WEIRD LANGUAGES. HE PROBABLY CONSIDERS THEM ABOUT EQUIVALENT IN POWER TO BLUB, BUT WITH ALL THIS OTHER HAIRY STUFF THROWN IN AS WELL. BLUB IS GOOD ENOUGH FOR HIM, BECAUSE HE THINKS IN BLUB.

WHEN WE SWITCH TO THE POINT OF VIEW OF A PROGRAMMER USING ANY OF THE LANGUAGES HIGHER UP THE POWER CONTINUUM, HOWEVER, WE FIND THAT HE IN TURN LOOKS DOWN UPON BLUB. HOW CAN YOU GET ANYTHING DONE IN BLUB? IT DOESNT EVEN HAVE Y.

BY INDUCTION, THE ONLY PROGRAMMERS IN A POSITION TO SEE ALL THE DIFFERENCES IN POWER BETWEEN THE VARIOUS LANGUAGES ARE THOSE WHO UNDERSTAND THE MOST POWERFUL ONE. THIS IS PROBABLY WHAT ERIC RAYMOND MEANT ABOUT LISP MAKING YOU A BETTER PROGRAMMER. YOU CANT TRUST THE OPINIONS OF THE OTHERS, BECAUSE OF THE BLUB PARADOX THEYRE SATISFIED WITH WHATEVER LANGUAGE THEY HAPPEN TO USE, BECAUSE IT DICTATES THE WAY THEY THINK ABOUT PROGRAMS.

I KNOW THIS FROM MY OWN EXPERIENCE, AS A HIGH SCHOOL KID WRITING PROGRAMS IN BASIC. THAT LANGUAGE DIDNT EVEN SUPPORT RECURSION. ITS HARD TO IMAGINE WRITING PROGRAMS WITHOUT USING RECURSION, BUT I DIDNT MISS IT AT THE TIME. I THOUGHT IN BASIC. AND I WAS A WHIZ AT IT. MASTER OF ALL I SURVEYED.

THE FIVE LANGUAGES THAT ERIC RAYMOND RECOMMENDS TO HACKERS FALL AT VARIOUS POINTS ON THE POWER CONTINUUM. WHERE THEY FALL RELATIVE TO ONE ANOTHER IS A SENSITIVE TOPIC. WHAT I WILL SAY IS THAT I THINK LISP IS AT THE TOP. AND TO SUPPORT THIS CLAIM ILL TELL YOU ABOUT ONE OF THE THINGS I FIND MISSING WHEN I LOOK AT THE OTHER FOUR LANGUAGES. HOW CAN YOU GET ANYTHING DONE IN THEM, I THINK, WITHOUT MACROS? 

MANY LANGUAGES HAVE SOMETHING CALLED A MACRO. BUT LISP MACROS ARE UNIQUE. AND BELIEVE IT OR NOT, WHAT THEY DO IS RELATED TO THE PARENTHESES. THE DESIGNERS OF LISP DIDNT PUT ALL THOSE PARENTHESES IN THE LANGUAGE JUST TO BE DIFFERENT. TO THE BLUB PROGRAMMER, LISP CODE LOOKS WEIRD. BUT THOSE PARENTHESES ARE THERE FOR A REASON. THEY ARE THE OUTWARD EVIDENCE OF A FUNDAMENTAL DIFFERENCE BETWEEN LISP AND OTHER LANGUAGES.

LISP CODE IS MADE OUT OF LISP DATA OBJECTS. AND NOT IN THE TRIVIAL SENSE THAT THE SOURCE FILES CONTAIN CHARACTERS, AND STRINGS ARE ONE OF THE DATA TYPES SUPPORTED BY THE LANGUAGE. LISP CODE, AFTER ITS READ BY THE PARSER, IS MADE OF DATA STRUCTURES THAT YOU CAN TRAVERSE.

IF YOU UNDERSTAND HOW COMPILERS WORK, WHATS REALLY GOING ON IS NOT SO MUCH THAT LISP HAS A STRANGE SYNTAX AS THAT LISP HAS NO SYNTAX. YOU WRITE PROGRAMS IN THE PARSE TREES THAT GET GENERATED WITHIN THE COMPILER WHEN OTHER LANGUAGES ARE PARSED. BUT THESE PARSE TREES ARE FULLY ACCESSIBLE TO YOUR PROGRAMS. YOU CAN WRITE PROGRAMS THAT MANIPULATE THEM. IN LISP, THESE PROGRAMS ARE CALLED MACROS. THEY ARE PROGRAMS THAT WRITE PROGRAMS.

PROGRAMS THAT WRITE PROGRAMS? WHEN WOULD YOU EVER WANT TO DO THAT? NOT VERY OFTEN, IF YOU THINK IN COBOL. ALL THE TIME, IF YOU THINK IN LISP. IT WOULD BE CONVENIENT HERE IF I COULD GIVE AN EXAMPLE OF A POWERFUL MACRO, AND SAY THERE HOW ABOUT THAT? BUT IF I DID, IT WOULD JUST LOOK LIKE GIBBERISH TO SOMEONE WHO DIDNT KNOW LISP THERE ISNT ROOM HERE TO EXPLAIN EVERYTHING YOUD NEED TO KNOW TO UNDERSTAND WHAT IT MEANT. IN ANSI COMMON LISP I TRIED TO MOVE THINGS ALONG AS FAST AS I COULD, AND EVEN SO I DIDNT GET TO MACROS UNTIL PAGE .

BUT I THINK I CAN GIVE A KIND OF ARGUMENT THAT MIGHT BE CONVINCING. THE SOURCE CODE OF THE VIAWEB EDITOR WAS PROBABLY ABOUT MACROS. MACROS ARE HARDER TO WRITE THAN ORDINARY LISP FUNCTIONS, AND ITS CONSIDERED TO BE BAD STYLE TO USE THEM WHEN THEYRE NOT NECESSARY. SO EVERY MACRO IN THAT CODE IS THERE BECAUSE IT HAS TO BE. WHAT THAT MEANS IS THAT AT LEAST OF THE CODE IN THIS PROGRAM IS DOING THINGS THAT YOU CANT EASILY DO IN ANY OTHER LANGUAGE. HOWEVER SKEPTICAL THE BLUB PROGRAMMER MIGHT BE ABOUT MY CLAIMS FOR THE MYSTERIOUS POWERS OF LISP, THIS OUGHT TO MAKE HIM CURIOUS. WE WERENT WRITING THIS CODE FOR OUR OWN AMUSEMENT. WE WERE A TINY STARTUP, PROGRAMMING AS HARD AS WE COULD IN ORDER TO PUT TECHNICAL BARRIERS BETWEEN US AND OUR COMPETITORS.

A SUSPICIOUS PERSON MIGHT BEGIN TO WONDER IF THERE WAS SOME CORRELATION HERE. A BIG CHUNK OF OUR CODE WAS DOING THINGS THAT ARE VERY HARD TO DO IN OTHER LANGUAGES. THE RESULTING SOFTWARE DID THINGS OUR COMPETITORS SOFTWARE COULDNT DO. MAYBE THERE WAS SOME KIND OF CONNECTION. I ENCOURAGE YOU TO FOLLOW THAT THREAD. THERE MAY BE MORE TO THAT OLD MAN HOBBLING ALONG ON HIS CRUTCHES THAN MEETS THE EYE.

AIKIDO FOR STARTUPS

BUT I DONT EXPECT TO CONVINCE ANYONE OVER TO GO OUT AND LEARN LISP. THE PURPOSE OF THIS ARTICLE IS NOT TO CHANGE ANYONES MIND, BUT TO REASSURE PEOPLE ALREADY INTERESTED IN USING LISP PEOPLE WHO KNOW THAT LISP IS A POWERFUL LANGUAGE, BUT WORRY BECAUSE IT ISNT WIDELY USED. IN A COMPETITIVE SITUATION, THATS AN ADVANTAGE. LISPS POWER IS MULTIPLIED BY THE FACT THAT YOUR COMPETITORS DONT GET IT.

IF YOU THINK OF USING LISP IN A STARTUP, YOU SHOULDNT WORRY THAT IT ISNT WIDELY UNDERSTOOD. YOU SHOULD HOPE THAT IT STAYS THAT WAY. AND ITS LIKELY TO. ITS THE NATURE OF PROGRAMMING LANGUAGES TO MAKE MOST PEOPLE SATISFIED WITH WHATEVER THEY CURRENTLY USE. COMPUTER HARDWARE CHANGES SO MUCH FASTER THAN PERSONAL HABITS THAT PROGRAMMING PRACTICE IS USUALLY TEN TO TWENTY YEARS BEHIND THE PROCESSOR. AT PLACES LIKE MIT THEY WERE WRITING PROGRAMS IN HIGHLEVEL LANGUAGES IN THE EARLY S, BUT MANY COMPANIES CONTINUED TO WRITE CODE IN MACHINE LANGUAGE WELL INTO THE S. I BET A LOT OF PEOPLE CONTINUED TO WRITE MACHINE LANGUAGE UNTIL THE PROCESSOR, LIKE A BARTENDER EAGER TO CLOSE UP AND GO HOME, FINALLY KICKED THEM OUT BY SWITCHING TO A RISC INSTRUCTION SET.

ORDINARILY TECHNOLOGY CHANGES FAST. BUT PROGRAMMING LANGUAGES ARE DIFFERENT PROGRAMMING LANGUAGES ARE NOT JUST TECHNOLOGY, BUT WHAT PROGRAMMERS THINK IN. THEYRE HALF TECHNOLOGY AND HALF RELIGION. AND SO THE MEDIAN LANGUAGE, MEANING WHATEVER LANGUAGE THE MEDIAN PROGRAMMER USES, MOVES AS SLOW AS AN ICEBERG. GARBAGE COLLECTION, INTRODUCED BY LISP IN ABOUT , IS NOW WIDELY CONSIDERED TO BE A GOOD THING. RUNTIME TYPING, DITTO, IS GROWING IN POPULARITY. LEXICAL CLOSURES, INTRODUCED BY LISP IN THE EARLY S, ARE NOW, JUST BARELY, ON THE RADAR SCREEN. MACROS, INTRODUCED BY LISP IN THE MID S, ARE STILL TERRA INCOGNITA.

OBVIOUSLY, THE MEDIAN LANGUAGE HAS ENORMOUS MOMENTUM. IM NOT PROPOSING THAT YOU CAN FIGHT THIS POWERFUL FORCE. WHAT IM PROPOSING IS EXACTLY THE OPPOSITE THAT, LIKE A PRACTITIONER OF AIKIDO, YOU CAN USE IT AGAINST YOUR OPPONENTS.

IF YOU WORK FOR A BIG COMPANY, THIS MAY NOT BE EASY. YOU WILL HAVE A HARD TIME CONVINCING THE POINTYHAIRED BOSS TO LET YOU BUILD THINGS IN LISP, WHEN HE HAS JUST READ IN THE PAPER THAT SOME OTHER LANGUAGE IS POISED, LIKE ADA WAS TWENTY YEARS AGO, TO TAKE OVER THE WORLD. BUT IF YOU WORK FOR A STARTUP THAT DOESNT HAVE POINTYHAIRED BOSSES YET, YOU CAN, LIKE WE DID, TURN THE BLUB PARADOX TO YOUR ADVANTAGE YOU CAN USE TECHNOLOGY THAT YOUR COMPETITORS, GLUED IMMOVABLY TO THE MEDIAN LANGUAGE, WILL NEVER BE ABLE TO MATCH.

IF YOU EVER DO FIND YOURSELF WORKING FOR A STARTUP, HERES A HANDY TIP FOR EVALUATING COMPETITORS. READ THEIR JOB LISTINGS. EVERYTHING ELSE ON THEIR SITE MAY BE STOCK PHOTOS OR THE PROSE EQUIVALENT, BUT THE JOB LISTINGS HAVE TO BE SPECIFIC ABOUT WHAT THEY WANT, OR THEYLL GET THE WRONG CANDIDATES.

DURING THE YEARS WE WORKED ON VIAWEB I READ A LOT OF JOB DESCRIPTIONS. A NEW COMPETITOR SEEMED TO EMERGE OUT OF THE WOODWORK EVERY MONTH OR SO. THE FIRST THING I WOULD DO, AFTER CHECKING TO SEE IF THEY HAD A LIVE ONLINE DEMO, WAS LOOK AT THEIR JOB LISTINGS. AFTER A COUPLE YEARS OF THIS I COULD TELL WHICH COMPANIES TO WORRY ABOUT AND WHICH NOT TO. THE MORE OF AN IT FLAVOR THE JOB DESCRIPTIONS HAD, THE LESS DANGEROUS THE COMPANY WAS. THE SAFEST KIND WERE THE ONES THAT WANTED ORACLE EXPERIENCE. YOU NEVER HAD TO WORRY ABOUT THOSE. YOU WERE ALSO SAFE IF THEY SAID THEY WANTED C OR JAVA DEVELOPERS. IF THEY WANTED PERL OR PYTHON PROGRAMMERS, THAT WOULD BE A BIT FRIGHTENING THATS STARTING TO SOUND LIKE A COMPANY WHERE THE TECHNICAL SIDE, AT LEAST, IS RUN BY REAL HACKERS. IF I HAD EVER SEEN A JOB POSTING LOOKING FOR LISP HACKERS, I WOULD HAVE BEEN REALLY WORRIED.



NOTES

 VIAWEB AT FIRST HAD TWO PARTS THE EDITOR, WRITTEN IN LISP, WHICH PEOPLE USED TO BUILD THEIR SITES, AND THE ORDERING SYSTEM, WRITTEN IN C, WHICH HANDLED ORDERS. THE FIRST VERSION WAS MOSTLY LISP, BECAUSE THE ORDERING SYSTEM WAS SMALL. LATER WE ADDED TWO MORE MODULES, AN IMAGE GENERATOR WRITTEN IN C, AND A BACKOFFICE MANAGER WRITTEN MOSTLY IN PERL.

IN JANUARY , YAHOO RELEASED A NEW VERSION OF THE EDITOR WRITTEN IN C AND PERL. ITS HARD TO SAY WHETHER THE PROGRAM IS NO LONGER WRITTEN IN LISP, THOUGH, BECAUSE TO TRANSLATE THIS PROGRAM INTO C THEY LITERALLY HAD TO WRITE A LISP INTERPRETER THE SOURCE FILES OF ALL THE PAGEGENERATING TEMPLATES ARE STILL, AS FAR AS I KNOW, LISP CODE. SEE GREENSPUNS TENTH RULE.

 ROBERT MORRIS SAYS THAT I DIDNT NEED TO BE SECRETIVE, BECAUSE EVEN IF OUR COMPETITORS HAD KNOWN WE WERE USING LISP, THEY WOULDNT HAVE UNDERSTOOD WHY IF THEY WERE THAT SMART THEYD ALREADY BE PROGRAMMING IN LISP.

 ALL LANGUAGES ARE EQUALLY POWERFUL IN THE SENSE OF BEING TURING EQUIVALENT, BUT THATS NOT THE SENSE OF THE WORD PROGRAMMERS CARE ABOUT. NO ONE WANTS TO PROGRAM A TURING MACHINE. THE KIND OF POWER PROGRAMMERS CARE ABOUT MAY NOT BE FORMALLY DEFINABLE, BUT ONE WAY TO EXPLAIN IT WOULD BE TO SAY THAT IT REFERS TO FEATURES YOU COULD ONLY GET IN THE LESS POWERFUL LANGUAGE BY WRITING AN INTERPRETER FOR THE MORE POWERFUL LANGUAGE IN IT. IF LANGUAGE A HAS AN OPERATOR FOR REMOVING SPACES FROM STRINGS AND LANGUAGE B DOESNT, THAT PROBABLY DOESNT MAKE A MORE POWERFUL, BECAUSE YOU CAN PROBABLY WRITE A SUBROUTINE TO DO IT IN B. BUT IF A SUPPORTS, SAY, RECURSION, AND B DOESNT, THATS NOT LIKELY TO BE SOMETHING YOU CAN FIX BY WRITING LIBRARY FUNCTIONS.

 NOTE TO NERDS OR POSSIBLY A LATTICE, NARROWING TOWARD THE TOP ITS NOT THE SHAPE THAT MATTERS HERE BUT THE IDEA THAT THERE IS AT LEAST A PARTIAL ORDER.

 IT IS A BIT MISLEADING TO TREAT MACROS AS A SEPARATE FEATURE. IN PRACTICE THEIR USEFULNESS IS GREATLY ENHANCED BY OTHER LISP FEATURES LIKE LEXICAL CLOSURES AND REST PARAMETERS.

 AS A RESULT, COMPARISONS OF PROGRAMMING LANGUAGES EITHER TAKE THE FORM OF RELIGIOUS WARS OR UNDERGRADUATE TEXTBOOKS SO DETERMINEDLY NEUTRAL THAT THEYRE REALLY WORKS OF ANTHROPOLOGY. PEOPLE WHO VALUE THEIR PEACE, OR WANT TENURE, AVOID THE TOPIC. BUT THE QUESTION IS ONLY HALF A RELIGIOUS ONE THERE IS SOMETHING THERE WORTH STUDYING, ESPECIALLY IF YOU WANT TO DESIGN NEW LANGUAGES.

FROM HTTPWWW.PAULGRAHAM.COMAVG.HTML
